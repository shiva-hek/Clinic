// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppointmentDbContext))]
    [Migration("20230720220736_CreateAppointmentTables")]
    partial class CreateAppointmentTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Appointments.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DoctorId");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PatientId");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RoomId");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Appointments", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Appointments.Entities.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<int>("DoctorType")
                        .HasColumnType("int")
                        .HasColumnName("DoctorType");

                    b.HasKey("Id");

                    b.ToTable("Doctors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0735b919-bd3a-48e2-a2bf-dd699e561940"),
                            DoctorType = 1
                        });
                });

            modelBuilder.Entity("Domain.Models.Appointments.Entities.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasColumnName("Gender");

                    b.HasKey("Id");

                    b.ToTable("Patients", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("504ecb9f-2a34-4fe9-9b89-24e2acac0620"),
                            Gender = 2
                        });
                });

            modelBuilder.Entity("Domain.Models.Appointments.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("Rooms", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Appointments.Entities.WeeklyAvailability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<int>("Day")
                        .HasColumnType("int")
                        .HasColumnName("Day");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DoctorId");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time")
                        .HasColumnName("EndTime");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time")
                        .HasColumnName("StartTime");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("WeeklyAvailabilities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c6382e51-9304-48cf-8176-5aaf33a78574"),
                            Day = 1,
                            DoctorId = new Guid("0735b919-bd3a-48e2-a2bf-dd699e561940"),
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("7e0269b1-08ca-4057-b6f4-59c109c1d4df"),
                            Day = 2,
                            DoctorId = new Guid("0735b919-bd3a-48e2-a2bf-dd699e561940"),
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("484af64f-5f6c-44ad-b9c0-e4466e2f11e0"),
                            Day = 3,
                            DoctorId = new Guid("0735b919-bd3a-48e2-a2bf-dd699e561940"),
                            EndTime = new TimeSpan(0, 12, 0, 0, 0),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("Domain.Models.Appointments.Entities.Appointment", b =>
                {
                    b.HasOne("Domain.Models.Appointments.Entities.Doctor", null)
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.Models.Appointments.ValueObjects.AppointmentTime", "AppointmentTime", b1 =>
                        {
                            b1.Property<Guid>("AppointmentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<TimeSpan>("Duration")
                                .HasColumnType("time")
                                .HasColumnName("Duration");

                            b1.Property<DateTime>("EndTime")
                                .HasColumnType("datetime2")
                                .HasColumnName("EndTime");

                            b1.Property<DateTime>("StartTime")
                                .HasColumnType("datetime2")
                                .HasColumnName("StartTime");

                            b1.HasKey("AppointmentId");

                            b1.ToTable("Appointments");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentId");
                        });

                    b.Navigation("AppointmentTime")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Appointments.Entities.Doctor", b =>
                {
                    b.OwnsOne("Domain.Models.Appointments.ValueObjects.EmailAddress", "EmailAddress", b1 =>
                        {
                            b1.Property<Guid>("DoctorId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("varchar(50)")
                                .HasColumnName("Email");

                            b1.HasKey("DoctorId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("Doctors");

                            b1.WithOwner()
                                .HasForeignKey("DoctorId");

                            b1.HasData(
                                new
                                {
                                    DoctorId = new Guid("0735b919-bd3a-48e2-a2bf-dd699e561940"),
                                    Value = "doctor.smith@example.com"
                                });
                        });

                    b.OwnsOne("Domain.Models.Appointments.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("DoctorId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Firstname")
                                .IsRequired()
                                .HasColumnType("varchar(20)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("Lastname")
                                .IsRequired()
                                .HasColumnType("varchar(30)")
                                .HasColumnName("LastName");

                            b1.HasKey("DoctorId");

                            b1.ToTable("Doctors");

                            b1.WithOwner()
                                .HasForeignKey("DoctorId");

                            b1.HasData(
                                new
                                {
                                    DoctorId = new Guid("0735b919-bd3a-48e2-a2bf-dd699e561940"),
                                    Firstname = "Doctor",
                                    Lastname = "Smith.k"
                                });
                        });

                    b.Navigation("EmailAddress")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Appointments.Entities.Patient", b =>
                {
                    b.OwnsOne("Domain.Models.Appointments.ValueObjects.EmailAddress", "EmailAddress", b1 =>
                        {
                            b1.Property<Guid>("PatientId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("varchar(50)")
                                .HasColumnName("Email");

                            b1.HasKey("PatientId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");

                            b1.HasData(
                                new
                                {
                                    PatientId = new Guid("504ecb9f-2a34-4fe9-9b89-24e2acac0620"),
                                    Value = "marry@example.com"
                                });
                        });

                    b.OwnsOne("Domain.Models.Appointments.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("PatientId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Firstname")
                                .IsRequired()
                                .HasColumnType("varchar(50)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("Lastname")
                                .IsRequired()
                                .HasColumnType("varchar(50)")
                                .HasColumnName("LastName");

                            b1.HasKey("PatientId");

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");

                            b1.HasData(
                                new
                                {
                                    PatientId = new Guid("504ecb9f-2a34-4fe9-9b89-24e2acac0620"),
                                    Firstname = "Marry",
                                    Lastname = "Johnson"
                                });
                        });

                    b.Navigation("EmailAddress")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Appointments.Entities.WeeklyAvailability", b =>
                {
                    b.HasOne("Domain.Models.Appointments.Entities.Doctor", null)
                        .WithMany("Availabilities")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Appointments.Entities.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Availabilities");
                });
#pragma warning restore 612, 618
        }
    }
}
